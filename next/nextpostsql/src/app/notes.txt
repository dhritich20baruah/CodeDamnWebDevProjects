page.tsx

import { redirect } from "next/navigation";
import { pool } from "./utils/dbConnect";
import dbConnect from "./utils/dbConnect";
import Link from "next/link";

export default async function Home() {
  dbConnect();

  // CREATE
  async function createNote(data: FormData) {
    "use server";
    let note = data.get("note")?.valueOf() as string | undefined;
    let writtenBy = data.get("writtenBy")?.valueOf() as string | undefined;

    try {
      const newNote = await pool.query('INSERT INTO notes (note, written_by) VALUES ($1, $2) RETURNING *', [note, writtenBy]);
      console.log(newNote.rows[0]);
    } catch (error) {
      console.log(error);
    }
    redirect('/');
  }

  // READ
  const data = await pool.query("SELECT * FROM notes");
  const result = data.rows;

  // DELETE
  async function deleteNote(data: FormData) {
    "use server";
    let id = data.get("id")?.valueOf() as string | undefined;

    try {
      await pool.query('DELETE FROM notes WHERE id=$1', [id]);
      console.log('note deleted');
    } catch (error) {
      console.log(error);
    }
    redirect('/');
  }

  return (
    <main className="m-10">
      <div className="m-5">
        <h1 className="text-center m-5">Add Note</h1>
        <form onSubmit={createNote} className="space-y-5">
          <input
            type="text"
            name="note"
            id="note"
            className="shadow-lg rounded-md shadow-black w-[100%] h-10 p-3"
            placeholder="Add note"
          />
          <input
            type="text"
            name="writtenBy"
            id="writtenBy"
            className="shadow-lg rounded-md shadow-black w-[100%] h-10 p-3"
            placeholder="Written by"
          />
          <button className="bg-orange-500 font-bold text-white hover:bg-red-600 p-3 rounded-md" type="submit">
            SUBMIT
          </button>
        </form>
      </div>
      <div className="m-5 space-y-10">
        <h1 className="text-center">Notes</h1>
        <div className="w-[100%]">
          <ul className="flex font-bold text-md">
            <li className="w-[50%] text-center">Notes</li>
            <li className="w-[30%] text-center">Written by</li>
            <li className="w-[20%] text-center">Options</li>
          </ul>
          {result.map((element) => {
            return (
              <div key={element.id}>
                <ul className="flex my-2">
                  <li className="w-[50%] text-center">{element.note}</li>
                  <li className="w-[30%] text-center">{element.written_by}</li>
                  <li className="w-[20%] text-center flex">
                    <form onSubmit={deleteNote}>
                      <input type="hidden" name="id" value={element.id} />
                      <button className="bg-red-700 font-bold hover:bg-orange-600 text-white p-1 m-1 rounded-sm" type="submit">DEL</button>
                    </form>
                    <Link href={"/edit/" + element.id}>
                      <button className="bg-cyan-700 font-bold hover:bg-green-600 text-white p-1 m-1 rounded-sm">EDIT</button>
                    </Link>
                  </li>
                </ul>
                <hr />
              </div>
            );
          })}
          <hr />
        </div>
      </div>
    </main>
  );
}


edit
import { redirect } from "next/navigation";
import dbConnect from "../../utils/dbConnect";
import { pool } from "../../utils/dbConnect";
import { GetServerSidePropsContext } from "next";

interface EditProps {
  params: {
    id: string;
  };
}

export default async function Edit({ params }: EditProps) {
  dbConnect();
  const id = params.id;
  const data = await pool.query("SELECT * FROM notes WHERE id = $1", [id]);
  const result = data.rows[0];

  async function updateNote(formData: FormData) {
    "use server";
    let note = formData.get("note")?.valueOf() as string | undefined;
    let writtenBy = formData.get("writtenBy")?.valueOf() as string | undefined;

    try {
      const updatedNote = await pool.query(
        `UPDATE notes SET note = $1, written_by = $2 WHERE id = $3`,
        [note, writtenBy, id]
      );
      console.log("Note updated");
    } catch (error) {
      console.error("Error updating note:", error);
    }
    redirect("/");
  }

  return (
    <main className="m-10">
      <div className="m-5">
        <h1 className="text-center m-5">Edit Note</h1>
        <form onSubmit={(e) => { e.preventDefault(); updateNote(new FormData(e.target)); }} className="space-y-5">
          <input
            type="text"
            name="note"
            id="note"
            className="shadow-lg rounded-md shadow-black w-[100%] h-10 p-3"
            placeholder="Add note"
            defaultValue={result.note}
          />
          <input
            type="text"
            name="writtenBy"
            id="writtenBy"
            className="shadow-lg rounded-md shadow-black w-[100%] h-10 p-3"
            placeholder="Written by"
            defaultValue={result.written_by}
          />
          <button
            className="bg-orange-500 font-bold text-white hover:bg-red-600 p-3 rounded-md"
            type="submit"
          >
            UPDATE
          </button>
        </form>
      </div>
    </main>
  );
}

// This is how you define server-side props with TypeScript
export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { params } = context;
  return {
    props: {
      params,
    },
  };
}

***********
dbConnect
import { Pool, PoolClient } from "pg";

export const pool = new Pool({
  user: "postgres",
  host: "localhost",
  database: "test",
  password: "81708",
  port: 5432,
});

export default async function dbConnect() {
  const client: PoolClient | null = await pool.connect();

  if (client) {
    try {
      const result = await client.query("SELECT NOW()");
      console.log("Connected to Database.");
    } catch (err) {
      console.error("Error executing query", err.stack);
    } finally {
      client.release();
    }
  } else {
    console.error("Error in connection");
  }
}
